#version 430

#extension GL_ARB_shading_language_include : require
#include </data/shaders/common/floatpacking.glsl>

layout (local_size_x = 32, local_size_y = 1, local_size_x = 1) in;

layout (r32ui, binding = 0) restrict readonly uniform uimage1D compactUsedClusterIDs;
layout (r16ui, binding = 1) restrict writeonly uniform uimage2D lightLists;
layout (rgba32f, binding = 2) restrict writeonly uniform image2D clusterCorners;

const int totalVplCount = 1024;
layout (std140, binding = 0) uniform packedVplBuffer_
{
    vec4 vplPositionNormalBuffer[totalVplCount];
};

layout (std140, binding = 0) buffer atomicBuffer_
{
	uint numUsedClusters;
};

uniform ivec2 viewport;
uniform mat4 viewInverseMatrix;
uniform mat4 projectionInverseMatrix;
uniform float zFar;

uniform int vplStartIndex = 0;
uniform int vplEndIndex = totalVplCount;

const uint pixelsPerCluster = 128;
const uint maxNumLights = 1024;

const float nearPlane = 0.05;
const int numDepthSlices = 16;
const int numSlicesIntoFirstSlice = 3;
float scaleFactor = (numDepthSlices + numSlicesIntoFirstSlice) / log2(zFar);

float sliceToZ(uint slice)
{
    if (slice == 0)
        return nearPlane;
    return -pow(2, (slice + numSlicesIntoFirstSlice) / scaleFactor);
}

void main()
{
    uint id = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;

    if (id >= numUsedClusters)
        return;

    uint clusterID = imageLoad(compactUsedClusterIDs, int(id)).x;

    uint clusterX = clusterID & 0xFFu;
    uint clusterY = clusterID >> 8 & 0xFFu;
    uint clusterZ = clusterID >> 16 & 0xFFu;
    uvec3 clusterCoord = uvec3(clusterX, clusterY, clusterZ);

    float viewSpaceZFront = sliceToZ(clusterZ);
    float viewSpaceZBack = sliceToZ(clusterZ + 1);

    float ndcL = float(clusterCoord.x) * pixelsPerCluster / viewport.x;
    float ndcR = float(clusterCoord.x + 1) * pixelsPerCluster / viewport.x;
    float ndcB = float(clusterCoord.y) * pixelsPerCluster / viewport.y;
    float ndcT = float(clusterCoord.y + 1) * pixelsPerCluster / viewport.y;

    vec3 cornersOnPlanes[8];
    cornersOnPlanes[0] = vec3(ndcL, ndcB, 0.0);
    cornersOnPlanes[1] = vec3(ndcL, ndcB, 1.0);
    cornersOnPlanes[2] = vec3(ndcR, ndcB, 0.0);
    cornersOnPlanes[3] = vec3(ndcR, ndcB, 1.0);
    cornersOnPlanes[4] = vec3(ndcL, ndcT, 0.0);
    cornersOnPlanes[5] = vec3(ndcL, ndcT, 1.0);
    cornersOnPlanes[6] = vec3(ndcL, ndcT, 0.0);
    cornersOnPlanes[7] = vec3(ndcL, ndcT, 1.0);

    for(int i = 0; i < 8; i++) {
        vec4 v = vec4(cornersOnPlanes[i], 1.0);
        v = v * 2.0 - 1.0;
        v = projectionInverseMatrix * v;
        cornersOnPlanes[i] = v.xyz / v.w;
    }

    vec3 corners[8];
    for(int i = 0; i < 4; i++) {
        vec3 interpolateA = cornersOnPlanes[i * 2];
        vec3 interpolateB = cornersOnPlanes[i * 2 + 1];
        float interpolator1 = (viewSpaceZFront - interpolateA.z) / (interpolateB.z - interpolateA.z);
        float interpolator2 = (viewSpaceZBack - interpolateA.z) / (interpolateB.z - interpolateA.z);
        corners[i * 2] = mix(interpolateA, interpolateB, interpolator1);
        corners[i * 2 + 1] = mix(interpolateA, interpolateB, interpolator2);
    }

    for (int i = 0; i < 8; i++) {
        corners[i] = (viewInverseMatrix * vec4(corners[i], 1.0)).xyz;
    }

    // debug data buffer
    // for (int i = 0; i < 8; i++) {
    //     imageStore(clusterCorners, ivec2(id, i), vec4(corners[i], 0.0));
    // }
    // imageStore(clusterCorners, ivec2(id, 0), vec4(clusterCoord, 0.0));
    // imageStore(clusterCorners, ivec2(id, 1), vec4(viewSpaceZFront, viewSpaceZBack, 0.0, 0.0));

    int counter = 1;
    int subListStartIndex = 0;
    for(int i = vplStartIndex; i < vplEndIndex; i++) {
        vec4 vplPositionNormal = vplPositionNormalBuffer[i];
        bool found = false;
        for (int j = 0; j < 8; j++) {
            vec3 corner = corners[j];
            vec3 vplToCorner = corner - vplPositionNormal.xyz;
            vec3 vplNormal = unpack3SNFromFloat(vplPositionNormal.w);
            found = found || (dot(vplToCorner, vplNormal) >= 0);
        }
        // found = true;
        if (found) {
            imageStore(lightLists, ivec2(id, subListStartIndex + counter), uvec4(i, 0, 0, 0));
            counter++;
        }

        // we're done with that sub-list.
        // write number of lights to first element and reset counters.
        if (i % 64 == 63) {
            imageStore(lightLists, ivec2(id, subListStartIndex), uvec4(counter, 0, 0, 0));
            counter = 1;
            subListStartIndex = i + 1;
        }
    }
}
