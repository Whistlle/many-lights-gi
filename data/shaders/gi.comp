#version 430

#extension GL_ARB_shading_language_include : require
#include </data/shaders/common/ism_utils.glsl>

struct VPL {
    vec4 position;
    vec4 normal;
    vec4 color;
};

layout (local_size_x = 8, local_size_y = 8, local_size_x = 1) in;
layout (r11f_g11f_b10f, binding = 0) restrict writeonly uniform image2D img_output;
layout (r8ui, binding = 1) restrict readonly uniform uimage2D clusterIDs;
layout (r16ui, binding = 2) restrict readonly uniform uimage3D normalToCompactIDs;
layout (r16ui, binding = 3) restrict readonly uniform uimage2D lightLists;

const int totalVplCount = 1024;
layout (std140, binding = 0) uniform vplBuffer_
{
    VPL vplBuffer[totalVplCount];
};

uniform sampler2D faceNormalSampler;
uniform sampler2D depthSampler;
uniform sampler2D ismDepthSampler;

uniform mat4 projectionMatrix;
uniform mat4 projectionInverseMatrix;
uniform mat4 viewMatrix;
uniform mat4 viewInvertedMatrix;
uniform mat4 viewProjectionInvertedMatrix;
uniform float zFar;
uniform float zNear;
uniform ivec2 viewport;

uniform float giIntensityFactor;
uniform float vplClampingValue;

// don't forget that these uniforms eat performance
uniform int vplStartIndex = 0;
uniform int vplEndIndex = totalVplCount;
int vplCount = vplEndIndex - vplStartIndex;
uniform bool scaleISMs = false;
float ismIndexOffset = scaleISMs ? vplStartIndex : 0;
int ismCount = (scaleISMs) ? vplCount : totalVplCount;
int ismIndices1d = int(ceil(sqrt(ismCount)));
uniform bool enableShadowing = true;

uniform bool showVPLPositions = false;
const uint interleavedSize = 4;
const uint interleavedPixels = interleavedSize*interleavedSize;
const uint vplsPerInvocation = totalVplCount / interleavedPixels;

const uint clusterPixelSize = 64;

void main()
{
    uvec2 interleavedBlockPosition = uvec2((gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy) * interleavedSize);
    uvec2 offset = uvec2(gl_WorkGroupID.z % interleavedSize, gl_WorkGroupID.z / interleavedSize);
    ivec2 fragCoord = ivec2(interleavedBlockPosition + offset);
    vec2 v_uv = vec2(fragCoord) / viewport;

    float depthSample = texelFetch(depthSampler, fragCoord, 0).r;
    vec4 ndc = vec4(v_uv, depthSample, 1.0) * 2.0 - 1.0;
    vec4 fragWorldCoordWithW = viewProjectionInvertedMatrix * ndc;
    vec3 fragWorldCoord = fragWorldCoordWithW.xyz / fragWorldCoordWithW.w;

    vec3 fragNormal = texelFetch(faceNormalSampler, fragCoord, 0).xyz * 2.0 - 1.0;

    vec3 acc = vec3(0.0);

    int index = int(gl_WorkGroupID.z * vplsPerInvocation);
    int startIndex = index;
    int endIndex = int(index + vplsPerInvocation);

    uint clusterZ = imageLoad(clusterIDs, fragCoord).r;
    uvec2 clusterCoord = uvec2(fragCoord.xy) / clusterPixelSize;

    uint compactClusterID = imageLoad(normalToCompactIDs, ivec3(clusterCoord, clusterZ)).r;
    uint numVPLs = imageLoad(lightLists, ivec2(compactClusterID, 0)).r;
    startIndex = int(float(numVPLs) / interleavedPixels * gl_WorkGroupID.z) + 1;
    endIndex = int(float(numVPLs) / interleavedPixels * (gl_WorkGroupID.z + 1)) + 1;

    // startIndex = 1;
    // endIndex = int(numVPLs) + 1;
    for (int lightListIndex = startIndex; lightListIndex < endIndex; lightListIndex++) {
        uint vplIndex = imageLoad(lightLists, ivec2(compactClusterID, lightListIndex)).r;
        // uint vplIndex = lightListIndex;
        VPL vpl = vplBuffer[vplIndex];

        vec3 vplWorldcoords = vpl.position.xyz;
        vec3 vplNormal = vpl.normal.xyz;
        vec3 vplColor = vpl.color.xyz;

        vec3 diff = fragWorldCoord - vplWorldcoords.xyz ;
        float dist = length(diff);
        vec3 normalizedDiff = diff / dist;

        // debug splotch
        float isNearLight = 1.0 - step(0.15, dist);
        vec3 debugSplotch = isNearLight * vplColor / dist / dist * 0.0001;
        acc += debugSplotch * float(showVPLPositions);

        // angle and attenuation
        float angleFactor = max(0.0, dot(vplNormal, normalizedDiff)) * max(0.0, dot(fragNormal, -normalizedDiff));

        float attenuation = 1.0 / pow(dist, 4.0);

        // paraboloid projection
        float ismIndex = vplIndex - ismIndexOffset;
        vec3 v = paraboloid_project(diff, dist, vplNormal, zFar, ismIndex, ismIndices1d);

        // ISM shadowing
        float occluderDepth = textureLod(ismDepthSampler, v.xy, 0).x;
        float shadowValue = v.z - occluderDepth;
        shadowValue = smoothstep(0.95, 1.0, 1 - shadowValue);
        shadowValue = mix(1.0, shadowValue, float(enableShadowing));

        float geometryTerm = angleFactor * attenuation;
        geometryTerm = min(geometryTerm, vplClampingValue);

        acc += vplColor * geometryTerm * shadowValue;
    }
    vec3 resultColor = vec3(acc * giIntensityFactor / vplCount) * interleavedPixels;
    imageStore(img_output, fragCoord, vec4(resultColor, 0.0));
}
