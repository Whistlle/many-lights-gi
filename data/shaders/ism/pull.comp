#version 430

#extension GL_ARB_shading_language_include : require
#include </data/shaders/common/floatpacking.glsl>

#define READ_FROM_TEXTURE

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0) uniform sampler2D ismDepthTexture;
layout (binding = 1) uniform sampler2D ismAttributeTexture;
layout (rgba32f, binding = 0) restrict readonly uniform image2D ismDepthImage;
layout (rgba32f, binding = 1) restrict writeonly uniform image2D img_output;


void main()
{
    ivec2 pixelCoordinate = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);

    ivec2 thisLevelSize = imageSize(img_output);
    ivec2 sizePerISM = thisLevelSize / 32;

    ivec2[4] offsets = { {0,0}, {0,1}, {1,0}, {1,1} };

    float[4] depthSamples;
    float[4] maxDepths;
    float[4] radiuses;
    vec3[4] normals;
    vec2[4] displacementVectors;
    bool[4] valid;

    for (int i = 0; i < 4; i++) {
        # ifdef READ_FROM_TEXTURE
            float depthSample = texelFetch(ismDepthTexture, pixelCoordinate * 2 + offsets[i], 0).r;
            // TODO actually read radius from color buffer. small triangles have smaller radiuses than the tesselation results.
            float normalRadius = texelFetch(ismAttributeTexture, pixelCoordinate * 2 + offsets[i], 0).r;
            float maxDepth = depthSample + 0.005; // TODO use radius somehow instead?
            vec2 displacementVector = vec2(0.0);
        # else
            vec4 read = imageLoad(ismDepthImage, pixelCoordinate * 2 + offsets[i]);
            float depthSample = read.r;
            float maxDepth = read.g;
            float normalRadius = read.b;
            vec2 displacementVector = Unpack2FromFP32(read.a);
        # endif

        vec4 normalRadiusUnpacked = Unpack4PNFromFP32(normalRadius);
        vec3 normal = normalRadiusUnpacked.xyz;
        float radius = normalRadiusUnpacked.w * 8.0;

        // radius check
        vec2 newDisplacementVector = (offsets[i] - 0.5 + displacementVector) / 2;
        float dist = length(newDisplacementVector);

        float scaledRadius = radius * float(sizePerISM.x) / 64;

        bool radiusCheckPassed = dist <= scaledRadius * 1;
        radiusCheckPassed = true;

        depthSamples[i] = depthSample;
        maxDepths[i] = maxDepth;
        radiuses[i] = radius;
        normals[i] = normal;
        displacementVectors[i] = newDisplacementVector; // TODO blocky results, but are round when displacment vector set to 0
        valid[i] = radiusCheckPassed && depthSample != 1.0; // TODO the radius check basically does nothing.
        // valid[i] = true; // TODO the radius check basically does nothing.
    }

    float minimum = 9001;
    float maxDepth;
    for (int i = 0; i < 4; i++) {
        if (!valid[i])
            continue;
        minimum = min(depthSamples[i], minimum);
        if (minimum == depthSamples[i])
            maxDepth = maxDepths[i];
    }

    for(int i = 0; i < 4; i++) {
        if (depthSamples[i] > maxDepth)
            valid[i] = false;
    }

    float depthAcc = 0.0;
    float radiusAcc = 0.0;
    vec2 displacementAcc = vec2(0.0);
    uint numValid = 0;
    float maxValidMaxDepth = 0.0;
    for (int i = 0; i < 4; i++) {
        if (!valid[i])
            continue;

        depthAcc += depthSamples[i];
        displacementAcc += displacementVectors[i];
        radiusAcc += radiuses[i];
        maxValidMaxDepth = max(maxValidMaxDepth, maxDepths[i]);
        numValid++;
    }

    vec4 result;
    if (numValid > 0) {
        result.r = depthAcc / numValid;
        result.g = maxValidMaxDepth;
        result.b = Pack4PNToFP32(vec4(normals[0], radiusAcc / numValid / 8.0));
        result.a = Pack2ForFP32(displacementAcc / numValid);
    } else {
        result = vec4(1.0, 0.0, 0.0, 0.0);
    }

    imageStore(img_output, pixelCoordinate, result);
}
