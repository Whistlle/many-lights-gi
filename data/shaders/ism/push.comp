#version 430

#extension GL_ARB_shading_language_include : require
#include </data/shaders/common/floatpacking.glsl>

#define LEVEL_ZERO

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0) uniform usampler3D pullSameLevelTexture;
layout (rgba32f, binding = 0) restrict readonly uniform image2D pullSameLevelImage;
layout (rgba32f, binding = 1) restrict readonly uniform image2D coarserLevel;
layout (rgba32f, binding = 2) restrict writeonly uniform image2D img_output;
layout (r16, binding = 3) restrict writeonly uniform image2D imgOutputLastStage;

uniform int level;


vec4 read(ivec2 pixelCoordinate)
{
    # ifdef LEVEL_ZERO
        float depthSample = float(texelFetch(pullSameLevelTexture, ivec3(pixelCoordinate, 0), 0).r) / 500000.0;
        return vec4(depthSample, 0.0, 0.0, 0.0);
    # else
        return imageLoad(pullSameLevelImage, pixelCoordinate);
    # endif
}

void main()
{
    ivec2 pixelCoordinate = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);

    ivec2 pixelInCoarserPixel = pixelCoordinate % 2;
    ivec2 offset = pixelInCoarserPixel * 2 - 1; // -1 or 1

    ivec2 origTexCoord = pixelCoordinate / 2;
    ivec2 coarserLevelSize = imageSize(coarserLevel);
    ivec2 coarserSizePerISM = coarserLevelSize / 32;

    ivec2[4] offsets = { {0,0}, {0,1}, {1,0}, {1,1} };
    int[4] weights = { 9, 3, 3, 1};
    float[4] depths;
    float[4] maxDepths;
    vec4[4] normalsRadiuses;
    vec2[4] displacementVectors;
    ivec2[4] texCoords;
    texCoords[0] = pixelCoordinate / 2;
    for (int i = 1 ; i < 4; i++) {
        texCoords[i] = pixelCoordinate / 2 + offset * offsets[i];
        // don't go over ISM borders
        // ISMs are 64px wide, so we ignore 6 bits of texture coordinates when reading from lowest level
        // we do read from level+1
        if (origTexCoord >> (6-(level+1)) != texCoords[i] >> (6-(level+1))) {
            weights[i] = 0;
            texCoords[i] = texCoords[0];
        }
    }


    for (int i = 0 ; i < 4; i++) {
        vec4 coarserSample = imageLoad(coarserLevel, texCoords[i]);
        depths[i] = coarserSample.r;
        maxDepths[i] = coarserSample.g;
        normalsRadiuses[i] = Unpack4PNFromFP32(coarserSample.b);
        normalsRadiuses[i].xyz = normalsRadiuses[i].xyz * 2.0 - 1.0;
        normalsRadiuses[i].w *= 15.0;
        displacementVectors[i] = Unpack2FromFP32(coarserSample.a);
        bool invalid = coarserSample.r == 1.0;
        if (invalid)
            weights[i] = 0;
    }

    for (int i = 0; i < 4; i++) {
        ivec2 texCoord = pixelCoordinate / 2 + offset * offsets[i];

        // radius check
        float radius = normalsRadiuses[i].w;
        displacementVectors[i] = (vec2(-offset * 0.5) + offset * offsets[i] * 2 + displacementVectors[i]*2);
        float dist = length(displacementVectors[i]);

        radius *= pow(2, -level); // scale with miplevel

        if (dist > radius)
            weights[i] = 0;
    }

    float minimum = 9001;
    float maxDepth;
    for (int i = 0; i < 4; i++) {
        if (weights[i] == 0)
            continue;
        minimum = min(depths[i], minimum);
        if (minimum == depths[i])
            maxDepth = maxDepths[i];
    }

    for(int i = 0; i < 4; i++) {
        if (depths[i] > maxDepth)
            weights[i] = 0;
    }


    float depthAcc = 0.0;
    float radiusAcc = 0.0;
    vec3 normalAcc = vec3(0.0);
    vec2 displacementAcc = vec2(0.0);
    int weightAcc = 0;
    float maxDepthAcc = 0.0;

    for (int i = 0; i < 4; i++) {
        depthAcc += depths[i] * weights[i];
        maxDepthAcc += maxDepths[i] * weights[i];
        radiusAcc += normalsRadiuses[i].w * weights[i];
        normalAcc += normalsRadiuses[i].xyz * weights[i];
        displacementAcc += displacementVectors[i] * weights[i];
        weightAcc += weights[i];
    }

    vec4 result = vec4(0.0);
    result.r = depthAcc / weightAcc;
    result.g = maxDepthAcc / weightAcc;
    result.b = Pack4PNToFP32(vec4(normalize(normalAcc) * 0.5 + 0.5, radiusAcc / weightAcc / 15.0));
    result.a = Pack2ForFP32(displacementAcc / weightAcc);


    vec4 origSample = read(pixelCoordinate);
    bool invalid = origSample.r == 1.0;

    bool occluded = false;
    for (int i = 0; i < 4; i++) {
        occluded = occluded || (weights[i] > 0 && origSample.r > maxDepths[i]);
    }

    bool allSamplesInvalid = weightAcc <= 0;
    if (allSamplesInvalid || !invalid && !occluded) {
        result = origSample;
    }

    // bool checkerboardWhite = ((pixelCoordinate.x % 2) + (pixelCoordinate.y % 2)) % 2 == 0;
    // result.r = float(checkerboardWhite);
    #ifdef LEVEL_ZERO
        // uncomment to fill last push stage
        // imageStore(img_output, pixelCoordinate, result);

        // result = origSample;
        imageStore(imgOutputLastStage, pixelCoordinate, vec4(result.r, 0.0, 0.0, 0.0));
    #else
        imageStore(img_output, pixelCoordinate, result);
    #endif
}
