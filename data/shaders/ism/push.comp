#version 430

#extension GL_ARB_shading_language_include : require
#include </data/shaders/common/floatpacking.glsl>

#define READ_FROM_TEXTURE

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0) uniform sampler2D pullSameLevelTexture;
layout (rgba32f, binding = 0) restrict readonly uniform image2D pullSameLevelImage;
layout (rgba32f, binding = 1) restrict readonly uniform image2D coarserLevel;
layout (rgba32f, binding = 2) restrict writeonly uniform image2D img_output;


vec4 read(ivec2 pixelCoordinate)
{
    # ifdef READ_FROM_TEXTURE
        return texelFetch(pullSameLevelTexture, pixelCoordinate, 0);
    # else
        return imageLoad(pullSameLevelImage, pixelCoordinate);
    # endif
}

void main()
{
    ivec2 pixelCoordinate = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);

    ivec2 pixelInCoarserPixel = pixelCoordinate % 2;
    ivec2 offset = pixelInCoarserPixel * 2 - 1; // -1 or 1


    ivec2 origTexCoord = pixelCoordinate / 2;
    ivec2 coarserLevelSize = imageSize(coarserLevel);
    ivec2 coarserSizePerISM = coarserLevelSize / 32;


    ivec2[4] offsets = { {0,0}, {0,1}, {1,0}, {1,1} };
    int[4] weights = { 9, 3, 3, 1};
    vec4[4] coarserSamples;
    vec4[4] normalsRadiuses;
    vec2[4] displacementVectors;
    ivec2[4] texCoords;
    texCoords[0] = pixelCoordinate / 2;
    for (int i = 1 ; i < 4; i++) {
        texCoords[i] = pixelCoordinate / 2 + offset * offsets[i];
        // don't go over ISM borders
        // convert to vec2 to not do integer divisions
        // if (floor(vec2(origTexCoord + coarserSizePerISM) / coarserSizePerISM) != floor(vec2(texCoords[i]+coarserSizePerISM) / coarserSizePerISM)) {
        //     weights[i] = 0;
        //     texCoords[i] = texCoords[0];
        // }
    }


    for (int i = 0 ; i < 4; i++) {
        coarserSamples[i] = imageLoad(coarserLevel, texCoords[i]);
        normalsRadiuses[i] = Unpack4PNFromFP32(coarserSamples[i].b);
        normalsRadiuses[i].w *= 8.0;
        displacementVectors[i] = Unpack2FromFP32(coarserSamples[i].a);
        bool invalid = coarserSamples[i].r == 1.0;
        if (invalid)
            weights[i] = 0;
    }

    bool anyValid = false;
    for (int i = 0 ; i < 4; i++)
        anyValid = anyValid || weights[i] > 0;

    for (int i = 0; i < 4; i++) {
        ivec2 texCoord = pixelCoordinate / 2 + offset * offsets[i];

        // radius check
        float radius = normalsRadiuses[i].w;
        displacementVectors[i] = (vec2(-offset * 0.5) + offset * offsets[i] * 2 + displacementVectors[i]*2);
        float dist = length(displacementVectors[i]);

        radius *= float(coarserSizePerISM.x) / 16;
        if (dist > radius * 1)
            weights[i] = 0;
    }

    float depthAcc = 0.0;
    float radiusAcc = 0.0;
    vec2 displacementAcc = vec2(0.0);
    int weightAcc = 0;
    float maxDepthAcc = 0.0;

    for (int i = 0; i < 4; i++) {
        depthAcc += coarserSamples[i].r * weights[i];
        maxDepthAcc += coarserSamples[i].g * weights[i];
        radiusAcc += normalsRadiuses[i].w * weights[i];
        displacementAcc += displacementVectors[i] * weights[i];
        weightAcc += weights[i];
    }

    vec4 origSample = read(pixelCoordinate);
    bool invalid = origSample.r == 1.0;

    vec4 result = vec4(0.0);
    result.r = depthAcc / weightAcc;
    result.g = maxDepthAcc / weightAcc;
    result.b = Pack4PNToFP32(vec4(normalsRadiuses[0].xyz, radiusAcc / weightAcc / 8.0));
    result.a = Pack2ForFP32(displacementAcc / weightAcc);

    if (weightAcc == 0) {
        result = origSample;
    }

    bool coarserSampleInvalid = coarserSamples[0].r == 1.0;
    // coarserSampleInvalid = weights[0] == 0;
    bool allSamplesInvalid = weightAcc == 0;
    bool occluded = !coarserSampleInvalid && origSample.r > coarserSamples[0].g;
    if (false || !invalid && !occluded) {
        result = origSample;
    }

    // result = origSample;
    // bool checkerboardWhite = ((pixelCoordinate.x % 2) + (pixelCoordinate.y % 2)) % 2 == 0;
    // result.r = float(checkerboardWhite);
    imageStore(img_output, pixelCoordinate, result);
}
