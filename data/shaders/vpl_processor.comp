#version 430

uniform writeonly image2D destTex;

uniform sampler2D rsmDiffuseSampler;
uniform sampler2D rsmNormalSampler;
uniform sampler2D rsmDepthSampler;

uniform mat4 biasedLightViewProjectionInverseMatrix;
uniform float lightIntensity;

const int totalVplCount = 1024;
layout (local_size_x = 64) in;

struct VPL {
	vec4 position;
	vec4 normal;
	vec4 color;
};

layout (std140, binding = 0) buffer vplBuffer_
{
	VPL vplBuffer[];
};

layout (packed, binding = 1) uniform shuffledIndicesBuffer_
{
	int shuffledIndicesBuffer[totalVplCount];
};

const uint rsmSamples1d = uint(ceil(sqrt(totalVplCount)));

void main()
{
    uint resultIndex = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
    uint totalWorkCount = gl_NumWorkGroups.x * gl_WorkGroupSize.x;

    uvec2 lightsOnAxis = uvec2(rsmSamples1d, totalWorkCount / rsmSamples1d);

    ivec2 samplerSize = textureSize(rsmDiffuseSampler, 0);

    uvec2 texCoords = uvec2(resultIndex % lightsOnAxis.x, resultIndex / lightsOnAxis.x) * samplerSize / lightsOnAxis;
    vec2 texCoordsf = vec2(texCoords) / samplerSize;

    vec3 diffuse = texelFetch(rsmDiffuseSampler, ivec2(texCoords), 0).rgb;
    vec3 normal = texelFetch(rsmNormalSampler, ivec2(texCoords), 0).rgb * 2.0 - 1.0;
    float depth = texelFetch(rsmDepthSampler, ivec2(texCoords), 0).r;

    vec4 worldcoords = biasedLightViewProjectionInverseMatrix * vec4(texCoordsf, depth, 1.0);
    worldcoords.xyz /= worldcoords.w;

    vec3 lightColor = diffuse * lightIntensity;

    resultIndex = shuffledIndicesBuffer[resultIndex];
    vplBuffer[resultIndex] = VPL(vec4(worldcoords.xyz, 0.0), vec4(normal, 0.0), vec4(lightColor, 0.0));
}
